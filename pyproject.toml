[build-system]
requires = [
    "setuptools",
    "wheel",
    "Cython>=0.29",
    "versioneer[toml]==0.28",
    # tomli is used by versioneer
    "tomli; python_version < '3.11'",
]

[tool.cibuildwheel]
skip = ["cp36-*", "cp37-*", "pp*", "*musllinux*"]
archs = ["auto64"]
manylinux-x86_64-image = "manylinux-vcpkg-gdal:latest"
manylinux-aarch64-image = "manylinux-aarch64-vcpkg-gdal:latest"
build-verbosity = 3

[tool.cibuildwheel.linux.environment]
VCPKG_INSTALL = "$VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET"
GDAL_INCLUDE_PATH = "$VCPKG_INSTALL/include"
GDAL_LIBRARY_PATH = "$VCPKG_INSTALL/lib"
GDAL_VERSION = "3.8.5"
PYOGRIO_PACKAGE_DATA = 1
GDAL_DATA = "$VCPKG_INSTALL/share/gdal"
PROJ_LIB = "$VCPKG_INSTALL/share/proj"

[tool.cibuildwheel.macos]
repair-wheel-command = [
    "DYLD_LIBRARY_PATH=$GDAL_LIBRARY_PATH delocate-listdeps {wheel}",
    "DYLD_LIBRARY_PATH=$GDAL_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}",
]

[tool.cibuildwheel.macos.environment]
VCPKG_INSTALL = "$VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET"
GDAL_INCLUDE_PATH = "$VCPKG_INSTALL/include"
GDAL_LIBRARY_PATH = "$VCPKG_INSTALL/lib"
GDAL_VERSION = "3.8.5"
PYOGRIO_PACKAGE_DATA = 1
GDAL_DATA = "$VCPKG_INSTALL/share/gdal"
PROJ_LIB = "$VCPKG_INSTALL/share/proj"
MACOSX_DEPLOYMENT_TARGET = "12.0"

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair --add-path C:/vcpkg/installed/x64-windows-dynamic-release/bin -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows.environment]
VCPKG_INSTALL = "$VCPKG_INSTALLATION_ROOT/installed/x64-windows-dynamic-release"
GDAL_INCLUDE_PATH = "$VCPKG_INSTALL/include"
GDAL_LIBRARY_PATH = "$VCPKG_INSTALL/lib"
GDAL_VERSION = "3.8.5"
PYOGRIO_PACKAGE_DATA = 1
GDAL_DATA = "$VCPKG_INSTALL/share/gdal"
PROJ_LIB = "$VCPKG_INSTALL/share/proj"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "pyogrio/_version.py"
versionfile_build = "pyogrio/_version.py"
parentdir_prefix = "pyogrio-"
tag_prefix = "v"

[tool.ruff]
line-length = 88

select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-gettext
    "INT",
    # pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # tidy imports
    "TID",
    # implicit string concatenation
    "ISC",
    # type-checking imports
    "TCH",
    # comprehensions
    "C4",
    # pygrep-hooks
    "PGH",
    # Ruff-specific rules
    "RUF",
    # pyupgrade
    "UP",
    # pydocstyle
    "D",
]

target-version = "py38"
ignore = [ # space before : (needed for how black formats slicing)
    # "E203",  # not yet implemented
    # do not assign a lambda expression, use a def
    "E731",
    # line break before binary operator
    # "W503",  # not yet implemented
    # line break after binary operator
    # "W504",  # not yet implemented
    # controversial
    "B006",
    # controversial
    "B007",
    # controversial
    "B008",
    # setattr is used to side-step mypy
    "B009",
    # getattr is used to side-step mypy
    "B010",
    # tests use assert False
    "B011",
    # tests use comparisons but not their returned value
    "B015",
    # false positives
    "B019",
    # Loop control variable overrides iterable it iterates
    "B020",
    # Function definition does not bind loop variable
    "B023",
    # Functions defined inside a loop must not use variables redefined in the loop
    # "B301",  # not yet implemented
    # Only works with python >=3.10
    "B905",
    # Too many arguments to function call
    "PLR0913",
    # Too many returns
    "PLR0911",
    # Too many branches
    "PLR0912",
    # Too many statements
    "PLR0915",
    # Redefined loop name
    "PLW2901",
    # Global statements are discouraged
    "PLW0603",
    # Docstrings should not be included in stubs
    "PYI021",
    # No builtin `eval()` allowed
    "PGH001",
    # compare-to-empty-string
    "PLC1901",
    # Use typing_extensions.TypeAlias for type aliases
    # "PYI026",  # not yet implemented
    # Use "collections.abc.*" instead of "typing.*" (PEP 585 syntax)
    # "PYI027",  # not yet implemented
    # while int | float can be shortened to float, the former is more explicit
    # "PYI041",  # not yet implemented

    # Additional checks that don't pass yet
    # Useless statement
    "B018",
    # Within an except clause, raise exceptions with ...
    "B904",
    # Magic number
    "PLR2004",
    # Consider `elif` instead of `else` then `if` to remove indentation level
    "PLR5501",
    # ambiguous-unicode-character-string
    "RUF001",
    # ambiguous-unicode-character-docstring
    "RUF002",
    # ambiguous-unicode-character-comment
    "RUF003",
    # collection-literal-concatenation
    "RUF005",
    # pairwise-over-zipped (>=PY310 only)
    "RUF007",
    # explicit-f-string-type-conversion
    "RUF010",
]

exclude = ["docs/*", "benchmarks/*", "pyogrio/_version.py"]

[tool.ruff.per-file-ignores]
# ignore pydocstyle errors in tests
"**/tests/*" = ["D"]
